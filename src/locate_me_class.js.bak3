// Loki.com 
function CMorizLocateMeProviderLoki() {
  this.provider = 'Loki';
  this.result = [];
  this.errors = 0;
  this.success = false;
  
  this.available = function() {
    var loki = false;
    console.log("Loki1");

    if ((typeof LokiAPI != 'undefined') && LokiAPI.isInstalled() && options['loki_key'] != false) {
      loki = true;
    }

    return loki;
  };
  
  this.locate = function() {
    console.log("Loki2");
    
    // try {
      var loki = LokiAPI();
      loki.onSuccess = this.handle_result;
      loki.onFailure = this.handle_error;
      console.dir(options['loki_key']);
      loki.setKey(options['loki_key']);
      loki.requestLocation(true, loki.NO_STREET_ADDRESS_LOOKUP);
    // } catch(e) {
    //   this.handle_error(e);
    // }
    
  };

  self.handle_result = function(position) {
    console.log("Loki2");
    this.result['provider']  = provider;
    this.result['timestamp'] = (new Date).getTime();
    this.result['latitude']  = position['latitude'];
    this.result['longitude'] = position['longitude'];
    this.success = true;
  };
  
  this.handle_error = function(error, msg) {
    this.errors++;
    
    // # 1001 - User denied location request
    if (error == 1001) {
      this.user_abort = true;
    }
  };
};

  
  
  
function CMorizLocateMe(user_options){
  
  var defaults = {  
                    'loki_key': false,
                    'gears_options': {},
                 };

  var self = this;
  this.options = mergeOptions(defaults, user_options);
  
  // sorting = priority!
  // this.selected_methods  = ['Gears', 'Loki', 'W3C', 'MaxMind'];
  this.selected_methods  = ['Loki'];
  
  this.available_methods = {};
  this.providers = [];
  
  var results    = [];
  var success    = false;
  var errors     = 10;
  var user_abort = false;

  // // accessors
  this.user_abort = function() {
    return user_abort;
  };
  
  this.success = function() {
    return success;
  };
  
  this.results = function() {
    return results;
  };
  
  this.result = function() {
    return results[0];
  };
  
  for (var gmk in this.selected_methods) {
    gm = this.selected_methods[gmk];
    var fn = "new CMorizLocateMeProvider" + gm + "()"
    this.providers[gm] = eval(fn);
  }
  
  
  
  this.locate = function() {
    this.check_available_geolocation_methods();
    //alert(this.selected_methods);
    this.get_location();
  };
  
  // - determine available methods
  this.check_available_geolocation_methods = function() {
    for (var gmk in this.selected_methods) {
      var avm = false;
      gm = this.selected_methods[gmk];
      console.log("provider: " + gm);
      //console.log("result: "   + this.provider[method].available(this.options));
      avm = this.providers[gm].available(options);
      this.available_methods[gm] = avm;
    };
  };  
  
  // - trigger location request
  this.get_location = function() {
    for (var method in this.available_methods) {
      // FIXME multiple
      // if (success    != false) { break; }
      //if (user_abort == true)  { break; }

      if (this.available_methods[method] == false) { continue; }
        var provi = this.providers[method]
        provi.locate(options);
        console.dir(provi.result);
        results.push(provi.result);
    };
  }
  
  function mergeOptions(def, custom) {
    var result = def;

    for (var key in custom) {
      result[key] = custom[key];
    }
    
    return result;  
  };
};



var options = { 'loki_key' : 'localhost' };
var LocateMe = new CMorizLocateMe(options);
LocateMe.selected_methods  = ['Loki'];

